{"version":3,"sources":["src/js/statemachine_designer.js","src/js/statemachine_designer/node.js","src/js/statemachine_designer/transition.js"],"names":[],"mappings":"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","file":"dist/js/statemachine_designer.js","sourcesContent":["class StatemachineDesigner extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nodes: props.nodes,\n      transitions: props.transitions\n    };\n  }\n\n  handleNodeChange(nodeIndex, x, y) {\n    var nodes = this.state.nodes;\n\n    nodes[nodeIndex].x = x;\n    nodes[nodeIndex].y = y;\n\n    this.setState({ nodes: nodes });\n  }\n\n  render() {\n    var nodes;\n    var transitions;\n\n    nodes = this.state.nodes.map((node, index) => {\n      return (\n        <StatemachineDesigner.Node\n          key={`node-${index}`}\n          node={node}\n          canvasWidth={this.props.canvasWidth}\n          canvasHeight={this.props.canvasHeight}\n          onNodeChange={this.handleNodeChange.bind(this, index)} />\n      );\n    });\n\n    transitions = this.state.transitions.map((transition, index) => {\n      return (\n        <StatemachineDesigner.Transition\n          key={`transition-${index}`}\n          nodeFrom={this.state.nodes[transition.nodeFrom]}\n          nodeTo={this.state.nodes[transition.nodeTo]} />\n      );\n    });\n\n    return (\n      <svg\n        className=\"smd-canvas\"\n        width={this.props.canvasWidth}\n        height={this.props.canvasHeight}>\n\n        {transitions}\n        {nodes}\n\n      </svg>\n    );\n  }\n}\n","StatemachineDesigner.Node = class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      node: props.node\n    }\n\n    // messy js scope bindings\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    document.removeEventListener(\"mousemove\", this.handleMouseMove);\n  }\n\n  handleMouseDown(event) {\n    if(!this.state.editing && !this.state.dragging) {\n      // keep the offset of the mousedrag start\n      this.dragStartX = event.pageX;\n      this.dragStartY = event.pageY;\n      this.nodeStartX = this.state.node.x;\n      this.nodeStartY = this.state.node.y;\n\n      this.addDragEventListeners();\n      this.setState({ dragging: true });\n    }\n  }\n\n  handleMouseMove(event) {\n    if(this.state.editing || !this.state.dragging) return;\n\n    var diffX = event.pageX - this.dragStartX;\n    var diffY = event.pageY - this.dragStartY;\n\n    this.props.onNodeChange(this.nodeStartX + diffX, this.nodeStartY + diffY);\n  }\n\n  handleDoubleClick(event) {\n    this.setState({ editing: true });\n  }\n\n  handleMouseUp(event) {\n    if(!this.state.editing && this.state.dragging) {\n      this.removeDragEventListeners();\n      this.setState({ dragging: false });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({ name: event.target.value });\n  }\n\n  addDragEventListeners() {\n    document.addEventListener(\"mousemove\", this.handleMouseMove, false);\n    document.addEventListener(\"mouseup\", this.handleMouseUp, false);\n  }\n\n  removeDragEventListeners() {\n    document.removeEventListener(\"mousemove\", this.handleMouseMove, false);\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n  }\n\n  render() {\n    var strokeWidth = this.state.node.start ? 2 : 1;\n    var endRect;\n\n    if(this.state.node.end) {\n      endRect = (\n        <rect\n          x={5 / 2}\n          y={5 / 2}\n          rx={3}\n          ry={3}\n          width={this.state.node.width - 5}\n          height={this.state.node.height - 5}\n          fill={this.state.dragging ? \"black\" : \"white\"}\n          stroke=\"black\"\n          strokeWidth=\"1\" />\n      );\n    }\n\n    return (\n      <svg\n        x={this.state.node.x}\n        y={this.state.node.y}\n        className=\"smd-interactive\"\n        onDoubleClick={this.handleDoubleClick.bind(this)}\n        onMouseDown={this.handleMouseDown.bind(this)}>\n\n        <rect\n          x={strokeWidth / 2}\n          y={strokeWidth / 2}\n          rx={5}\n          ry={5}\n          width={this.state.node.width - strokeWidth}\n          height={this.state.node.height - strokeWidth}\n          fill={this.state.dragging ? \"black\" : \"white\"}\n          stroke=\"black\"\n          strokeWidth={strokeWidth} />\n\n        {endRect}\n\n        <text\n          x={this.state.node.width / 2}\n          y={this.state.node.height / 2}\n          fontSize={12}\n          alignmentBaseline=\"middle\"\n          fill={this.state.dragging ? \"white\" : \"black\"}\n          textAnchor=\"middle\">\n          {this.state.node.name}\n        </text>\n\n      </svg>\n    );\n  }\n}\n","StatemachineDesigner.Transition = class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { hover: false };\n  }\n\n  getLineDrawing() {\n    // start at middle of start node\n    var x1 = this.props.nodeFrom.x + this.props.nodeFrom.width / 2;\n    var y1 = this.props.nodeFrom.y + this.props.nodeFrom.height / 2;\n\n    // end at middle of end node\n    var x2 = this.props.nodeTo.x + this.props.nodeTo.width / 2;\n    var y2 = this.props.nodeTo.y + this.props.nodeTo.height / 2;\n\n    return `M${x1} ${y1}, L ${x2} ${y2}`;\n  }\n\n  getArrowDrawing() {\n    var p = this.getArrowPosition();\n    var halfArrowSize = StatemachineDesigner.Transition.ARROW_SIZE / 2;\n\n    return `M ${p.x - halfArrowSize} ${p.y + halfArrowSize}, ` +\n           `L ${p.x} ${p.y - halfArrowSize}, ` +\n           `L ${p.x + halfArrowSize} ${p.y + halfArrowSize}, ` +\n           `Z`\n  }\n\n  getArrowPosition() {\n    var nodeFromX = this.props.nodeFrom.x + this.props.nodeFrom.width / 2;\n    var nodeFromY = this.props.nodeFrom.y + this.props.nodeFrom.height / 2;\n\n    var nodeToX = this.props.nodeTo.x + this.props.nodeTo.width / 2;\n    var nodeToY = this.props.nodeTo.y + this.props.nodeTo.height / 2;\n\n    var arrowX = (nodeToX - (((nodeToX - nodeFromX) * StatemachineDesigner.Transition.ARROW_OFFSET) / 2));\n    var arrowY = (nodeToY - (((nodeToY - nodeFromY) * StatemachineDesigner.Transition.ARROW_OFFSET) / 2));\n\n    return { x: arrowX, y: arrowY };\n  }\n\n  getArrowTransformation() {\n    var p = this.getArrowPosition();\n    return `rotate(${this.getAngle() + 90} ${p.x} ${p.y})`;\n  }\n\n  getAngle() {\n    var x1 = this.props.nodeFrom.x + this.props.nodeFrom.width / 2;\n    var y1 = this.props.nodeFrom.y + this.props.nodeFrom.height / 2;\n    var x2 = this.props.nodeTo.x + this.props.nodeTo.width / 2;\n    var y2 = this.props.nodeTo.y + this.props.nodeTo.height / 2;\n\n    var deltaX = x2 - x1;\n    var deltaY = y2 - y1;\n\n    return Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n  }\n\n  handleMouseEnter(event) {\n    this.setState({ hover: true });\n  }\n\n  handleMouseLeave(event) {\n    this.setState({ hover: false });\n  }\n\n  render() {\n    return (\n      <svg\n        className=\"smd-interactive\"\n        onMouseEnter={this.handleMouseEnter.bind(this)}\n        onMouseLeave={this.handleMouseLeave.bind(this)}>\n        <path\n          d={this.getLineDrawing()}\n          stroke={this.state.hover ? \"red\" : \"black\"}\n          fill=\"transparent\" />\n\n        <path\n          d={this.getArrowDrawing()}\n          stroke={this.state.hover ? \"red\" : \"black\"}\n          strokeWidth=\"1\"\n          transform={this.getArrowTransformation()}\n          fill={this.state.hover ? \"red\" : \"black\"} />\n      </svg>\n    );\n  }\n}\n\nStatemachineDesigner.Transition.ARROW_SIZE = 15;\nStatemachineDesigner.Transition.ARROW_OFFSET = 0.9;\n"]}